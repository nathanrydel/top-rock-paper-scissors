{"version":3,"file":"bundle.js","sources":["../src/game.ts","../src/ui.ts"],"sourcesContent":["/**\n * Represents the possible choices in the game.\n */\nexport type Choice = 'ROCK' | 'PAPER' | 'SCISSORS';\n\n/**\n * Represents the possible outcomes of a round.\n */\nexport type Winner = 'player' | 'computer' | 'tie';\n\n/**\n * Class representing a Rock, Paper, Scissors game.\n */\nexport class Game {\n  private playerScore: number = 0;\n  private computerScore: number = 0;\n\n  /**\n   * Plays a round of the game.\n   *\n   * @param {Choice} playerSelection - The player's choice.\n   * @param {Choice} computerSelection - The computer's choice.\n   * @returns {Winner} The result of the round, either 'player', 'computer',\n   * or 'tie'.\n   */\n  playRound(playerSelection: Choice, computerSelection: Choice): Winner {\n    if (playerSelection === computerSelection) return 'tie';\n\n    if (\n      (playerSelection === 'ROCK' && computerSelection === 'SCISSORS') ||\n      (playerSelection === 'PAPER' && computerSelection === 'ROCK') ||\n      (playerSelection === 'SCISSORS' && computerSelection === 'PAPER')) {\n\n      this.playerScore++;\n      return 'player';\n    }\n    this.computerScore++;\n    return 'computer';\n  }\n\n  /**\n   * Generates a random choice for the computer.\n   *\n   * @returns {Choice} A random choice: 'ROCK', 'PAPER', or 'SCISSORS'.\n   */\n  getRandomChoice(): Choice {\n    const choices: Choice[] = ['ROCK', 'PAPER', 'SCISSORS'];\n    return choices[Math.floor(Math.random() * choices.length)];\n  }\n\n  /**\n * Checks if the game is over.\n *\n * @returns {boolean} True if either player or computer has scored 5 points;\n * otherwise, false.\n */\n  isGameOver(): boolean {\n    return this.playerScore === 5 || this.computerScore === 5;\n  }\n\n  /**\n   * Gets the current scores of the player and the computer.\n   *\n   * @returns {{ player: number, computer: number }} An object containing the\n   * current scores.\n   */\n  getScores(): { player: number, computer: number; } {\n    return { player: this.playerScore, computer: this.computerScore };\n  }\n\n  /**\n   * Resets the game scores to zero.\n   */\n  resetGame(): void {\n    this.playerScore = 0;\n    this.computerScore = 0;\n  }\n\n  /**\n   * Capitalizes the first letter of a given string.\n   *\n   * @param {string} str - The input string.\n   * @returns {string} The input string with the first letter capitalized.\n   */\n  static capitalizeFirstLetter(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n  }\n}","import { Game, Choice, Winner } from './game';\n\nexport class UI {\n  private game: Game;\n  private scoreInfo: HTMLElement;\n  private scoreMessage: HTMLElement;\n  private playerScorePara: HTMLElement;\n  private computerScorePara: HTMLElement;\n  private playerSign: HTMLElement;\n  private computerSign: HTMLElement;\n  private rockBtn: HTMLElement;\n  private paperBtn: HTMLElement;\n  private scissorsBtn: HTMLElement;\n  private endgameModal: HTMLElement;\n  private overlay: HTMLElement;\n  private endgameMsg: HTMLElement;\n  private restartBtn: HTMLElement;\n\n  constructor() {\n    this.game = new Game();\n    this.scoreInfo = document.getElementById('score-info')!;\n    this.scoreMessage = document.getElementById('score-message')!;\n    this.playerScorePara = document.getElementById('player-score')!;\n    this.computerScorePara = document.getElementById('computer-score')!;\n    this.playerSign = document.getElementById('player-sign')!;\n    this.computerSign = document.getElementById('computer-sign')!;\n    this.rockBtn = document.getElementById('rock-btn')!;\n    this.paperBtn = document.getElementById('paper-btn')!;\n    this.scissorsBtn = document.getElementById('scissors-btn')!;\n    this.endgameModal = document.getElementById('endgame-modal')!;\n    this.overlay = document.getElementById('overlay')!;\n    this.endgameMsg = document.getElementById('endgame-msg')!;\n    this.restartBtn = document.getElementById('restart-btn')!;\n\n    // Event Listeners\n    this.rockBtn.addEventListener('click', () => this.handleClick('ROCK'));\n    this.paperBtn.addEventListener('click', () => this.handleClick('PAPER'));\n    this.scissorsBtn.addEventListener('click', () => this.handleClick('SCISSORS'));\n    this.restartBtn.addEventListener('click', () => this.restartGame());\n  }\n\n  private handleClick(playerSelection: Choice): void {\n    if (this.game.isGameOver()) {\n      this.openEndgameModal();\n      return;\n    }\n\n    const computerSelection = this.game.getRandomChoice();\n    const winner = this.game.playRound(playerSelection, computerSelection);\n    this.updateChoices(playerSelection, computerSelection);\n    this.updateScore(winner, playerSelection, computerSelection);\n\n    if (this.game.isGameOver()) {\n      this.openEndgameModal();\n      this.setFinalMessage();\n    }\n  }\n\n  private updateChoices(playerSelection: Choice, computerSelection: Choice): void {\n    this.playerSign.textContent = this.getSign(playerSelection);\n    this.computerSign.textContent = this.getSign(computerSelection);\n  }\n\n  private getSign(choice: Choice): string {\n    switch (choice) {\n      case 'ROCK': return 'ü™®';\n      case 'PAPER': return 'üìÉ';\n      case 'SCISSORS': return '‚úÇÔ∏è';\n    }\n  }\n\n  private updateScore(winner: Winner, playerSelection: Choice, computerSelection: Choice): void {\n    const scores = this.game.getScores();\n\n    if (winner === 'tie') {\n      this.scoreInfo.textContent = \"It's a tie!\";\n    } else if (winner === 'player') {\n      this.scoreInfo.textContent = 'You won!';\n    } else {\n      this.scoreInfo.textContent = 'You lost!';\n    }\n\n    this.playerScorePara.textContent = `Player: ${scores.player}`;\n    this.computerScorePara.textContent = `Computer: ${scores.computer}`;\n\n    this.updateScoreMessage(winner, playerSelection, computerSelection);\n  }\n\n  private updateScoreMessage(winner: Winner, playerSelection: Choice, computerSelection: Choice): void {\n    if (winner === 'player') {\n      this.scoreMessage.textContent = (\n        `${Game.capitalizeFirstLetter(playerSelection)} beats ${computerSelection.toLowerCase()}`\n      );\n    } else if (winner === 'computer') {\n      this.scoreMessage.textContent = (\n        `${Game.capitalizeFirstLetter(playerSelection)} is beaten by ${computerSelection.toLowerCase()}`\n      );\n    } else {\n      this.scoreMessage.textContent = (\n        `${Game.capitalizeFirstLetter(playerSelection)} ties with ${computerSelection.toLowerCase()}`\n      );\n    }\n  }\n\n  private openEndgameModal(): void {\n    this.overlay.classList.add('active');\n    this.endgameModal.classList.add('active');\n  }\n\n  private closeEndgameModal(): void {\n    this.overlay.classList.remove('active');\n    this.endgameModal.classList.remove('active');\n  }\n\n  private setFinalMessage(): void {\n    const scores = this.game.getScores();\n    this.endgameMsg.textContent = scores.player > scores.computer ? 'You won!' : 'You lost...';\n  }\n\n  private restartGame(): void {\n    this.game.resetGame();\n    this.scoreInfo.textContent = 'Choose your weapon';\n    this.scoreMessage.textContent = 'First to score 5 points wins the game';\n    this.playerScorePara.textContent = 'Player: 0';\n    this.computerScorePara.textContent = 'Computer: 0';\n    this.playerSign.textContent = 'üï¥Ô∏è';\n    this.computerSign.textContent = 'üñ•Ô∏è';\n    this.closeEndgameModal();\n  }\n}\n\n// Initialize the UI\nnew UI();\n"],"names":["Game","constructor","this","playerScore","computerScore","playRound","playerSelection","computerSelection","getRandomChoice","choices","Math","floor","random","length","isGameOver","getScores","player","computer","resetGame","capitalizeFirstLetter","str","charAt","toUpperCase","slice","toLowerCase","UI","game","scoreInfo","document","getElementById","scoreMessage","playerScorePara","computerScorePara","playerSign","computerSign","rockBtn","paperBtn","scissorsBtn","endgameModal","overlay","endgameMsg","restartBtn","addEventListener","handleClick","restartGame","openEndgameModal","winner","updateChoices","updateScore","setFinalMessage","textContent","getSign","choice","scores","updateScoreMessage","classList","add","closeEndgameModal","remove"],"mappings":"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"}